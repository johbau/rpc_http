// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HELLO_HELLO_H_
#define FLATBUFFERS_GENERATED_HELLO_HELLO_H_

#include "flatbuffers/flatbuffers.h"

namespace Hello {

struct HelloRequest;
struct HelloRequestBuilder;

struct HelloResponse;
struct HelloResponseBuilder;

enum RequestType {
  RequestType_UNKNOWN = 0,
  RequestType_GREETING = 1,
  RequestType_GOODBYE = 2,
  RequestType_MIN = RequestType_UNKNOWN,
  RequestType_MAX = RequestType_GOODBYE
};

inline const RequestType (&EnumValuesRequestType())[3] {
  static const RequestType values[] = {
    RequestType_UNKNOWN,
    RequestType_GREETING,
    RequestType_GOODBYE
  };
  return values;
}

inline const char * const *EnumNamesRequestType() {
  static const char * const names[4] = {
    "UNKNOWN",
    "GREETING",
    "GOODBYE",
    nullptr
  };
  return names;
}

inline const char *EnumNameRequestType(RequestType e) {
  if (flatbuffers::IsOutRange(e, RequestType_UNKNOWN, RequestType_GOODBYE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesRequestType()[index];
}

struct HelloRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef HelloRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REQUEST_TYPE = 4,
    VT_MESSAGE = 6
  };
  Hello::RequestType request_type() const {
    return static_cast<Hello::RequestType>(GetField<int8_t>(VT_REQUEST_TYPE, 0));
  }
  const flatbuffers::String *message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_REQUEST_TYPE) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct HelloRequestBuilder {
  typedef HelloRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_request_type(Hello::RequestType request_type) {
    fbb_.AddElement<int8_t>(HelloRequest::VT_REQUEST_TYPE, static_cast<int8_t>(request_type), 0);
  }
  void add_message(flatbuffers::Offset<flatbuffers::String> message) {
    fbb_.AddOffset(HelloRequest::VT_MESSAGE, message);
  }
  explicit HelloRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HelloRequestBuilder &operator=(const HelloRequestBuilder &);
  flatbuffers::Offset<HelloRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HelloRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<HelloRequest> CreateHelloRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    Hello::RequestType request_type = Hello::RequestType_UNKNOWN,
    flatbuffers::Offset<flatbuffers::String> message = 0) {
  HelloRequestBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_request_type(request_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<HelloRequest> CreateHelloRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    Hello::RequestType request_type = Hello::RequestType_UNKNOWN,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return Hello::CreateHelloRequest(
      _fbb,
      request_type,
      message__);
}

struct HelloResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef HelloResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *result() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_RESULT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RESULT) &&
           verifier.VerifyVector(result()) &&
           verifier.VerifyVectorOfStrings(result()) &&
           verifier.EndTable();
  }
};

struct HelloResponseBuilder {
  typedef HelloResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_result(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> result) {
    fbb_.AddOffset(HelloResponse::VT_RESULT, result);
  }
  explicit HelloResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HelloResponseBuilder &operator=(const HelloResponseBuilder &);
  flatbuffers::Offset<HelloResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HelloResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<HelloResponse> CreateHelloResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> result = 0) {
  HelloResponseBuilder builder_(_fbb);
  builder_.add_result(result);
  return builder_.Finish();
}

inline flatbuffers::Offset<HelloResponse> CreateHelloResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *result = nullptr) {
  auto result__ = result ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*result) : 0;
  return Hello::CreateHelloResponse(
      _fbb,
      result__);
}

inline const Hello::HelloResponse *GetHelloResponse(const void *buf) {
  return flatbuffers::GetRoot<Hello::HelloResponse>(buf);
}

inline const Hello::HelloResponse *GetSizePrefixedHelloResponse(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Hello::HelloResponse>(buf);
}

inline bool VerifyHelloResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Hello::HelloResponse>(nullptr);
}

inline bool VerifySizePrefixedHelloResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Hello::HelloResponse>(nullptr);
}

inline void FinishHelloResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Hello::HelloResponse> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedHelloResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Hello::HelloResponse> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Hello

#endif  // FLATBUFFERS_GENERATED_HELLO_HELLO_H_
